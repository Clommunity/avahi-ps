#!/bin/bash
#
# avahi-ps: Avahi Publicar i Buscar -
# Amb aquest script podem buscar i configurar els serveis que trovem per avahi.
# Tamb√© podem publicar nous serveis.

# General functions
avahi-ps-help() {
	cat <<EOF
Avahi - Publish and Search: System to publish avahi services or Search existents services.
Use: $0 publish|search|unpublish|info <options>

Use: $0 publish <describe> <type> <port> [txt]
       <describe>: Text describe service.
       <type>: Service type.
       <port>: Service port.
       <txt>: Other information, format 'attibute1=value1&attribute2=value2&...&attributeN=valueN'.

Use: $0 search [type] [hostname]

Use: $0 unpublish [type] [port]

Use: $0 info <variable>
       <variable>: informations ip, cloud, tincdev, communitydev.
EOF
	exit 0
}

err() {
	echo ERROR: "$@"
	exit 1
}

filepath() {
	local _dir="$(dirname "$0")"
	echo $(cd "$_dir" && pwd)
}

# Start program
[[ $# -lt 1 ]] && avahi-ps-help

# Variables
FILE_PATH=$(filepath)
INSTALL_PATH="/usr/sbin"
INSTALL_PLUG_PATH="/usr/share/avahi-ps"
if [[ $FILE_PATH == $INSTALL_PATH ]]
then
	FILE_PATH="$INSTALL_PLUG_PATH"
fi

DATABASE="none"
PUBLIC_DEVICE="wlan0"
CLOUD_NAME="guifi"
#DEVICE_NAME="${CLOUD_NAME}"
DEVICE_NAME="demo"
EXECUTE_IN="memory"
ERRORS_PLUG="errors"
SAVE_SERVICE="none"
GETINCONF_FILE=/etc/getinconf-client.conf

# Calculate Variables.
if [[ -f $GETINCONF_FILE ]]
then
	. $GETINCONF_FILE
	DEVICE_NAME="${NETWORK_NAME}"
	PUBLIC_DEVICE="${INTERNAL_DEV}"
fi

FILENAME="avahi-ps-"
#NODENAME=$(uname -n)

PLUG_DIR="$FILE_PATH/plugs/"
load_plug() {
	local _plug_path="${PLUG_DIR}${FILENAME}${1}"
	[[ -f $_plug_path ]] || err "\"$_plug_path\" doesn't exist!"
	. "$_plug_path"
}

load_plug_if_exists() {
	local _plug_path="${PLUG_DIR}${FILENAME}${1}"
	[[ -f $_plug_path ]] && . "$_plug_path"
}

# Load plugins.
load_plug "$ERRORS_PLUG"
load_plug "$EXECUTE_IN"
load_plug_if_exists "$SAVE_SERVICE"
load_plug "$DATABASE"

# Publish
if [[ $1 == publish ]]
then
	shift
	publish_service "$@"

elif [[ $1 == search ]]
then
	shift
	search_service "$@"

elif [[ $1 == unpublish ]]
then
	shift
	unpublish_service "$@"

elif [[ $1 == info ]]
then
	case $2	in
		"ip")
			ip addr show dev $PUBLIC_DEVICE | grep "inet " | awk '{print $2}' | awk -F "/" {'print $1'}
			#ifconfig $PUBLIC_DEVICE | grep "inet " | awk '{print $2}' | awk -F ":" '{print $2}'
			;;
		"cloud")
			echo "$CLOUD_NAME"
			;;
		"tincdev")
			echo "$DEVICE_NAME"
			;;
		"communitydev")
			echo "$PUBLIC_DEVICE"
			;;
	esac
fi

